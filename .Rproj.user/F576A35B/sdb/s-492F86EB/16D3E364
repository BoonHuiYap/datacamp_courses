{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to R\"\nauthor: \"William Surles\"\ndate: \"2017-03-28\"\noutput: \n html_document:\n  self_contained: yes\n  theme: flatly\n  highlight: tango\n---\n\n***\n> This document was updated on **`r Sys.Date()`**.\n\n***\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(eval=T, echo=T, cache=T, message=F, warning=F)\n```\n\n# Introduction\n\n  - I am copying my work from the class to this document\n  - This will make it much easier for me to find and refernce what I have done/learned  \n  - Most of this is simply me copying the working solutions from the class examples or practice\n  - I may insert a few of my own thoughts and comments along the way\n  - This all comes from [Introduction to R](https://campus.datacamp.com/courses/free-introduction-to-r) course on DataCamp\n    - I highly recommend the [DataCamp](https://www.datacamp.com/home) courses\n    - They step you through the work and include videos and much more description than I include here\n    - This doc is no replacement for working through the classes on your own!\n  \n  \n# Intro to Basics\n\n## How it Works\n\n  - This section has some pretty juicy R charts here.   \n  - This was hott stuff back in 1996 \n    - Many of these styles of charts are still usefull now for data exploration\n    - Thought I would not use base R graphics to make them\n    - I'd start with ggplot2 or ggvis\n    - Still its fun to see these charts. Don't wory about the code to make them for now. \n\n```{r results='hide'}\n\n# The hashtag is used to add comments\n\n# Show some demo graphs generated with R\ndemo(\"graphics\")\n\n```\n\n## Arthmetic with R\n\nYeah, it does all the usual stuff.\n\n```{r}\n\n# An addition\n5 + 5\n\n# A substraction\n5 - 5\n\n# A multiplication\n3 * 5\n\n# A division\n(5 + 5)/2\n\n# Exponentiation\n2^5\n\n# Modulo\n17%%4\n\n```\n\n## Variable assignment\n\n```{r}\n\n# Assign the value 42 to x\nx <- 42\n\n# Print out the value of the variable x\nx\n\n```\n\n## Variable assignment 2\n\n```{r}\n\n# Assign the value 5 to the variable called my_apples\nmy_apples <- 5\nmy_apples\n\n```\n\n## Variable assignment 3\n\n```{r}\n# Assign a value to the variables called my_apples and my_oranges\nmy_apples <- 5\nmy_oranges <- 6\n\n# Add these two variables together and print the result\nmy_fruit <- my_apples + my_oranges\nmy_fruit\n\n```\n\n## Apples and oranges\n\n  - This would fail because you can't add character vectors.\n  - Rstudio won't even knit the document. \n  - It will throw an error in the code.\n  - I have `eval=F` so this will run and just paste the error below\n\n```{r, eval=F}\n\n# Assign a value to the variable called my_apples\nmy_apples <- 'apples'\nmy_oranges <- 'oranges'\n\n# Add a character\nmy_fruit <- my_apples + my_oranges\n\n```\n\n`Error in my_apples + my_oranges : non-numeric argument to binary operator`\n\n## Basic data types in R\n\n```{r}\n\n# What's the answer to the universe\nmy_numeric <- 42\n\n# The quotation marks indicate that the variable is of type character\nmy_character <- \"forty-two\"\n\nmy_logical <- FALSE\n\n\n```\n\n## Whats's that data type?\n\n```{r}\n\n# Declare variables of different types\nmy_numeric <- 42\nclass(my_numeric)\n\nmy_character <- \"forty-two\"\nclass(my_character)\n\nmy_logical <- FALSE\nclass(my_logical)\n\n\n```\n\n\n# Vectors\n\n  - Note: I almost **always** use dataframes\n  - But I guess its still good to know the other data types \n  - They all have there uses\n\n## Create a vector\n\n```{r}\n\nVegas <- as.character(\"Here we go!\")\nVegas\n\n```\n\n## Create a vector (2)\n\n```{r}\n\nnumeric_vector <- c(1, 10, 49)\ncharacter_vector <- c(\"a\", \"b\", \"c\")\nboolean_vector <- c(T,F,T)\n\n# Print the vectors\nnumeric_vector\ncharacter_vector\nboolean_vector\n\n```\n\n## Create a vector (3)\n\n```{r}\n\n# Poker winnings from Monday to Friday\npoker_vector <- c(140, -50, 20, -120, 240)\npoker_vector\n\n# Roulette winnings form Monday to Friday\nroulette_vector <- c(-24, -50, 100, -350, 10)\nroulette_vector\n\n```\n\n## Naming a vector\n\n```{r}\n\n## Name the vectors\nnames(poker_vector) <- c(\"Mon\",\"Tues\",\"Wed\",\"Thur\",\"Fri\")\npoker_vector\n\nnames(roulette_vector) <- c(\"Mon\",\"Tues\",\"Wed\",\"Thur\",\"Fri\")\nroulette_vector\n\n```\n\n## Naming a vector (2)\n\n```{r}\n\n# Create the variable days_vector\ndays_vector <- c(\"Mon\",\"Tues\",\"Wed\",\"Thur\",\"Fri\")\n\n# Assign the names of the day to the roulette and poker_vectors\nnames(poker_vector) <- days_vector\npoker_vector\n\nnames(roulette_vector) <- days_vector\nroulette_vector\n\n```\n\n## Calculating total winnings\n\n```{r}\n## First, just an example\nA_vector <- c(1, 2, 3)\nB_vector <- c(4, 5, 6)\n\n# Take the sum of A_vector and B_vector\ntotal_vector <- A_vector + B_vector\ntotal_vector\n\n```\n\n## Calculating total winnings (2)\n\n```{r}\n\n# Name poker and roulette\ndays <- c(\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\")\nnames(roulette_vector) <- days\nnames(poker_vector) <- days\n\ntotal_daily <- poker_vector + roulette_vector\ntotal_daily\n\n```\n\n## Calculating total winnings (3)\n\n```{r}\n\ntotal_poker <- sum(poker_vector)\ntotal_roulette <- sum(roulette_vector)\n\ntotal_week <- sum(roulette_vector) + sum(poker_vector)\ntotal_week\n\n```\n\n## Comparing total winnings\n\n```{r}\n\n# Check if you realized higher total gains in poker then in roulette\nanswer <- total_poker > total_roulette\nanswer\n\n```\n\n## Vector selection: the good times\n\n```{r}\n\n# Define new variable based on a selection\npoker_wednesday <- poker_vector[\"Wednesday\"]\npoker_wednesday\n\n```\n\n## Vector selection: the good times (2)\n\n```{r}\n\n# Define new variable based on a selection\npoker_midweek <- poker_vector[c(\"Tuesday\",\"Wednesday\",\"Thursday\")]       \npoker_midweek \n\n```\n\n## Vector selection: the good times (3)\n\n```{r}\n\n# Define new variable based on a selection\nroulette_selection_vector <- roulette_vector[2:5]\nroulette_selection_vector \n\n```\n\n## Vector selection: the good times (4)\n\n```{r}\n\naverage_midweek_gain <- mean(poker_vector[c(\"Monday\",\"Tuesday\",\"Wednesday\")])\naverage_midweek_gain\n\n```\n\n## Selection by comparison - Step 1\n\n```{r}\n\n# What days of the week did you make money on poker\nselection_vector <- poker_vector > 0\nselection_vector\n\n```\n\n## Selection by comparison - Step 2\n\n```{r}\n\n# What days of the week did you make money on poker\nselection_vector <- poker_vector > 0\n\n# Select from poker_vector these days\npoker_winning_days <- poker_vector[selection_vector]\npoker_winning_days\n\n```\n\n## Advanced selection\n\n```{r}\n\n# Show me\nroulette_winning_days <- roulette_vector[roulette_vector > 0]\nroulette_winning_days\n\n```\n\n# Matrices\n\n## What's a matrix?\n\n```{r}\n\n# Construction of a matrix with 3 rows containing the numbers 1 up to 9\nmatrix(1:9, byrow=T, nrow=3)\n\n```\n\n## Analyzing matrices, you shall\n\n```{r}\n\n# Box office Star Wars: In Millions!\n# The first element: US, the second element: Non-US \nnew_hope = c(460.998007, 314.4)\nempire_strikes = c(290.475067, 247.900000)\nreturn_jedi = c(309.306177,165.8)\n\n# Add your code below to construct the matrix\nstar_wars_matrix = matrix(c(new_hope, empire_strikes, return_jedi), byrow=T, nrow=3)\nstar_wars_matrix\n\n```\n\n## Naming a matrix\n\n```{r}\n\n# Add your code here such that rows and columns of star_wars_matrix have a\n# name!\nrownames(star_wars_matrix) = c('A New Hope','The Empire Strikes Back','Return of the Jedi')\ncolnames(star_wars_matrix) = c('US','non-US')\nstar_wars_matrix\n\n```\n\n## Calculating the worldwide box office\n\n```{r}\n\n# Box office Star Wars: In Millions (!) \n# Construct matrix: \nbox_office_all = c(461, 314.4,290.5, 247.9,309.3,165.8)\nmovie_names = c(\"A New Hope\",\"The Empire Strikes Back\",\"Return of the Jedi\")\ncol_titles = c(\"US\",\"non-US\")\n\nstar_wars_matrix = matrix(box_office_all, nrow=3, byrow=TRUE, dimnames=list(movie_names,col_titles))\nstar_wars_matrix\n\nworldwide_vector = rowSums(star_wars_matrix)\nworldwide_vector\n```\n\n## Adding a column for the worldwide box office\n\n```{r}\n\n# Bind the new variable worldwide_vector as a column to star_wars_matrix\nall_wars_matrix = cbind(star_wars_matrix, worldwide_vector)\nall_wars_matrix\n\n```\n\n## Adding a row\n  - In the course they had the star_wars_matrix2 pre loaded\n  - Here I just copy the original\n  - this works to show what rbind does\n  \n```{r}\n\n# Matrix containing first trilogy box office\nstar_wars_matrix  \n\n# Create a Matrix containing second trilogy box office\nbox_office_all = c(474.5, 552.5, 310.7, 338.7, 380.3, 468.5)\nmovie_names = c(\"The Phantom Menace\",\"Attack of the Clones\",\"Revenge of the Sixth\")\ncol_titles = c(\"US\",\"non-US\")\n\nstar_wars_matrix2 = matrix(box_office_all, nrow=3, byrow=TRUE, dimnames=list(movie_names,col_titles))\nstar_wars_matrix2\n\n# Combine both Star Wars trilogies in one matrix\nall_wars_matrix = rbind(star_wars_matrix, star_wars_matrix2)\nall_wars_matrix\n\n```\n\n## The total box office revenue for the entire saga\n\n```{r}\n\n# Print box office Star Wars: In Millions (!) for 2 trilogies\nall_wars_matrix\n\ntotal_revenue_vector = colSums(all_wars_matrix)\ntotal_revenue_vector\n\n```\n\n## Selection of matix elements\n\n```{r}\n\nmean_non_us_all  =  mean(star_wars_matrix[,2])\nmean_non_us_all\n\nmean_non_us_some = mean(star_wars_matrix[1:2,2])\nmean_non_us_some\n\n```\n\n## A little arithmetic with matrices\n\n```{r}\n\nvisitors = star_wars_matrix/5\nvisitors\n\n```\n\n## A little arithmetic with matrices (2)\n\n```{r}\n\nticket_prices_matrix = matrix(c(5,5,6,6,7,7), nrow=3, byrow=TRUE, dimnames=list(movie_names,col_titles)) \nticket_prices_matrix\n\nvisitors = star_wars_matrix/ticket_prices_matrix\nvisitors\n\naverage_us_visitor = mean(visitors[,1])\naverage_us_visitor\n\naverage_non_us_visitor = mean(visitors[,2])\naverage_non_us_visitor\n\n```\n\n\n# Factors\n\n## What's a factor and why would you use it?\n\nR uses factors for categorical variables!\n\n## What's a factor and why would you use it? (2)\n\n```{r}\n\ngender_vector = c(\"Male\",\"Female\",\"Female\",\"Male\",\"Male\")\n\nfactor_gender_vector = factor(gender_vector)\nfactor_gender_vector\n\n```\n\n## What's a factor and why would you use it? (3)\n\n```{r}\n\nanimals_vector = c(\"Elephant\", \"Giraffe\", \"Donkey\", \"Horse\")\nfactor_animals_vector = factor(animals_vector)\nfactor_animals_vector\n\ntemperature_vector = c(\"High\", \"Low\", \"High\", \"Low\", \"Medium\")\nfactor_temperature_vector = factor(temperature_vector, order = TRUE, levels = c(\"Low\", \n    \"Medium\", \"High\"), labels = c(\"L\",\"M\",\"H\"))\nfactor_temperature_vector\n\n```\n\n## Factor levels\n\n```{r}\n\nsurvey_vector = c(\"M\", \"F\", \"F\", \"M\", \"M\")\nfactor_survey_vector = factor(survey_vector)\nfactor_survey_vector\n\nlevels(factor_survey_vector) = c(\"Female\",\"Male\")\nfactor_survey_vector\n\n```\n\n## Summarizing a factor\n\n```{r}\n\n# Type your code here for survey_vector\nsummary(survey_vector)\n\n# Type your code here for factor_survey_vector\nsummary(factor_survey_vector)\n\n```\n\n## Battle of the sexes\n\n```{r}\n\n# Male\nfactor_survey_vector[1] \n\n# Female\nfactor_survey_vector[2] \n\n# Battle of the sexes: Male 'larger' than female?\nfactor_survey_vector[1] > factor_survey_vector[2] \n\n```\n\n## Ordered Factors\n\n```{r}\n\n# Create 'speed_vector'\nspeed_vector <- c('Fast','Slow','Slow','Fast','Ultra-fast')\n\nfactor_speed_vector <- factor(speed_vector, ordered = T, levels = c('Slow','Fast','Ultra-fast'))\nfactor_speed_vector\n\n# R prints automagically in the right order\nsummary(factor_speed_vector) \n\n```\n\n\n## Comparing ordered factors\n\n```{r}\n\n# Is data analyst 2 faster than data analyst 5?\ncompare_them <- speed_vector[2] > speed_vector[5]\ncompare_them\n\n```\n\n# Data frames\n\n## What's a data frame?\n\n```{r}\n\nmtcars  # Built-in R dataset stored in a data frame\n\n```\n\n## Quick, hae a look at your data set\n\n```{r}\n\n# Have a quick look at your data\nhead(mtcars)\n\n```\n\n## Have a look at the structure\n\n```{r}\n\n# Investigate the structure of the mtcars dataset to get started!\nstr(mtcars)\n\n```\n\n## Create a data frame\n\n```{r}\n\nplanets = c(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \n    \"Neptune\")\n\ntype = c(\"Terrestrial planet\", \"Terrestrial planet\", \"Terrestrial planet\", \"Terrestrial planet\", \n    \"Gas giant\", \"Gas giant\", \"Gas giant\", \"Gas giant\")\n\ndiameter = c(0.382, 0.949, 1, 0.532, 11.209, 9.449, 4.007, 3.883)\n\nrotation = c(58.64, -243.02, 1, 1.03, 0.41, 0.43, -0.72, 0.67)\n\nrings = c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)\n\n# Create the data frame:\nplanets_df = data.frame(planets, type, diameter, rotation, rings)\nplanets_df\n\n```\n\n## Create a data frame (2)\n\n```{r}\n\n# Check the structure of planets.df\nstr(planets_df)\n\n```\n\n## Selection of data frame elements\n\n```{r}\n\n# The planets_df data frame from the previous exercise is pre-loaded\nclosest_planets_df <- planets_df[1:3,]\nclosest_planets_df\n\nfurthest_planets_df <- planets_df[6:8,]\nfurthest_planets_df\n\n```\n\n## Selection of data frame elements (2)\n\n```{r}\n\n# The planets_df data frame from the previous exercise is pre-loaded: \nfurthest_planets_diameter = planets_df$diameter[3:8]\n\n```\n\n## Only planets with rings\n\n```{r}\n\n# Create the rings_vector\nrings_vector = planets_df$rings\n\n```\n\n## Only planets with rings (2)\n\n```{r}\n\n# Select the information on planets with rings:\nplanets_with_rings_df =  planets_df[planets_df$rings,]\n\n```\n\n## Only planets with rings but shorter\n\n```{r}\n\n# Planets smaller than earth:\nsmall_planets_df  = subset(planets_df, diameter < 1)\n\n```\n\n## Sorting\n\n```{r}\n\n# Just play around with the order function in the console to see how it\n# works\na <- c(100,9,101)\norder(a)\n\n```\n\n## Sorting your data frame\n\n```{r}\n\n# What is the correct ordering based on the planets_df$diameter variable?\npositions =  order(planets_df$diameter, decreasing = T)\npositions\n\n# Create new \"ordered\" data frame:\nlargest_first_df = planets_df[positions,]\nlargest_first_df\n\n```\n\n\n# Lists\n\n## Lists, why would you need them?\n\nThey are useful sometimes.\n\n## Lists, why would you need them? (2)\n\n  - A list in R is similar to your to-do list at work or school: \n    - the different items on that list most likely differ in length, characteristic, type of activity that has to do be done, ...\n  - A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. \n    - These objects can be matrices, vectors, data frames, even other lists, etc. \n    - It is not even required that these objects are related to each other in any way.\n  - You could say that a list is some kind super data type: \n    - you can store practically any piece of information in it!\n\n## Creating a list\n\n```{r}\n\n# Vector with numerics from 1 up to 10\nmy_vector <- 1:10 \nmy_vector\n\n# Matrix with numerics from 1 up to 9\nmy_matrix <- matrix(1:9, ncol = 3)\nmy_matrix\n\n# First 10 elements of the built-in data frame 'mtcars'\nmy_df <- mtcars[1:10,]\nmy_df\n\n# Construct list with these different elements:\nmy_list <- list(my_vector, my_matrix, my_df)\nmy_list\n\n```\n\n## Creating a named list\n\n```{r}\n\n# Construct 'my_list' with these different elements:\nmy_list <- list(vec = my_vector, mat = my_matrix, df = my_df)\n\n# Print 'my_list' to the console\nmy_list\n\n```\n\n## Creating a named list (2)\n\n```{r}\n\n# The vectors 'actors' and 'reviews' are pre-loaded in the workspace\nactors <- c(\"Jack Nicholson\", \"Shelley Duvall\", \"Danny Lloyd\", \"Scatman Crothers\", \"Barry Nelson\")\n\nreviews <- data.frame(\n  scores = c(4.5, 4.0, 5.0),\n  sources = c(\"IMDb1\", \"IMDb2\", \"IMDb3\"),\n  comments = c(\"Best Horror Film I Have Ever Seen\",\n               \"A truly brilliant and scary film from Stanley Kubrick\",\n               \"A masterpiece of psychological horror\")\n)\n\n# Create the list 'shining_list'\nshining_list <- list(\n    moviename = \"The Shining\",\n    actors = actors,\n    reviews = reviews)\n\nshining_list\n```\n\n## Selecting elements from a list\n\n```{r}\n\n# Define 'last_actor'\nlast_actor <- shining_list$actors[length(shining_list$actors)]\nlast_actor\n\n# Define 'second_review'\nsecond_review <- shining_list$reviews[2,]\nsecond_review\n\n```\n\n## Adding more movie information to the list\n\n```{r}\n\n# We forgot something; add the year to shining_list\nshining_list_full <- c(shining_list, year = 1980)\n\n# Have a look at shining_list_full\nstr(shining_list_full)\n\n```\n",
    "created" : 1490727109414.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1509361121",
    "id" : "16D3E364",
    "lastKnownWriteTime" : 1490746950,
    "last_content_update" : 1490746950892,
    "path" : "~/Dev/non_work_projects/datacamp_r_courses/introduction_to_r/introduction_to_r.Rmd",
    "project_path" : "introduction_to_r/introduction_to_r.Rmd",
    "properties" : {
        "last_setup_crc32" : "2EFF76B83a037c08",
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}